#include "iic.h"
#include "delay.h"
 
#define IIC_SDA_H	GPIO_SetBits(GPIOB,GPIO_Pin_7)
#define IIC_SDA_L	GPIO_ResetBits(GPIOB,GPIO_Pin_7)

#define IIC_SCL_H	GPIO_SetBits(GPIOB,GPIO_Pin_6)
#define IIC_SCL_L	GPIO_ResetBits(GPIOB,GPIO_Pin_6)

#define IIC_SDA_IN	PBin(7)
 
//初始化IIC
void IIC_Init(void)
{					     
	GPIO_InitTypeDef GPIO_InitStructure;
	RCC_APB2PeriphClockCmd(	RCC_APB2Periph_GPIOB, ENABLE );	//使能GPIOB时钟
	   
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6|GPIO_Pin_7;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP ;   //推挽输出
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(GPIOB, &GPIO_InitStructure);
	GPIO_SetBits(GPIOB,GPIO_Pin_6|GPIO_Pin_7); 	//PB6,PB7 输出高
}

//产生IIC起始信号		SCL在高电平时，SDA由高变低
void IIC_Start(void)
{
	IIC_SDA_H;	  	  
	IIC_SCL_H;
	IIC_SDA_L;
	IIC_SCL_L;
}	  

//产生IIC停止信号		SCL在高电平时，SDA由低变高
void IIC_Stop(void)
{
	IIC_SDA_L;	  	  
	IIC_SCL_H;
	IIC_SDA_H;						   	
}

//等待应答信号到来，SCL在高电平时，SDA为低电平则接受应答成功
//返回值:	1，接收应答失败
//       	0，接收应答成功
u8 IIC_Wait_Ack(void)	//发送一个数据之后，从机必须产生应答，如果没应答，代表数据传输失败
{
	u8 ucErrTime=0;
	IIC_SDA_H;
	IIC_SCL_H;				//SCL在高电平时，SDA为低电平则接受应答成功	 
	while(IIC_SDA_IN)		//如果返回1，则接受失败
	{
		ucErrTime++;
		if(ucErrTime>250)	//如果扫描250次后仍无应答
		{
			IIC_Stop();		//发送停止信号
			return 1;
		}
	}
	IIC_SCL_L;			//时钟输出0 	   
	return 0;  
}

//产生ACK应答			在SCL时钟由低变高之前将SDA拉低，并保持至SCL由高变低时
void IIC_Ack(void)		
{
	IIC_SCL_L;
	IIC_SDA_L;
	IIC_SCL_H;
	IIC_SCL_L;
	
}

//不产生ACK应答		   在SCL时钟由低变高之前将SDA拉高，并保持至SCL由高变低时    
void IIC_NAck(void)		
{
	IIC_SCL_L;
	IIC_SDA_H;
	IIC_SCL_H;
	IIC_SCL_L;
}		

//IIC发送一个字节 	从高位开始传输,数据传输时，SDA在SCL由低→高→低时不允许变化
//返回从机有无应答
//1，有应答
//0，无应答			  
void IIC_Write_Byte(u8 Byte)
{                        
    u8 i;   	    
    IIC_SCL_L;//拉低时钟开始数据传输
    for(i=0;i<8;i++)
    {              
		if(Byte & (0X80>>i))
			IIC_SDA_H;
		else
			IIC_SDA_L;  
		IIC_SCL_H;
		IIC_SCL_L;
    }	 
} 	    

//读1个字节，ack=1时，发送ACK，ack=0，发送nACK，高位优先   SCL由低→高时，从机放数据在SDA上，此时读取数据，SCL再高→低
u8 IIC_Read_Byte(void)
{
	unsigned char i,Byte=0;
    for(i=0;i<8;i++ )
	{
        IIC_SCL_L;
		IIC_SCL_H;
        if(IIC_SDA_IN)
		{
			Byte|=(0x80>>i);
		}			
    }					 
    return Byte;
}

//写入数据时序：
//开始信号 -- 器件地址+写命令 -- 等待应答 -- 写入存储地址 -- 等待应答 --
//写入数据 -- 等待应答 -- 停止信号
void IIC_Write_Data(u8 DataAddr,u8 DeviceAddr,u8 Data)
{
	IIC_Start();
	IIC_Write_Byte(DeviceAddr | 0xA0);
	IIC_Wait_Ack();
	IIC_Write_Byte(DataAddr);
	IIC_Wait_Ack();
	IIC_Write_Byte(Data);
	IIC_Wait_Ack();
	IIC_Stop();
	delay_ms(10);		//写入数据需要时间，如果不加延时，可能没写完时序就改了
}

//读取数据时序：
//开始信号 -- 器件地址+写命令 -- 等待应答 -- 写入存储地址 -- 等待应答 --
//开始信号 -- 器件地址+读命令 -- 等待应答 -- 读取数据 -- 发送应答1 -- 停止信号
u8 IIC_Read_Data(u8 DataAddr,u8 DeviceAddr)
{
	u8 Data;
	IIC_Start();
	IIC_Write_Byte(DeviceAddr | 0xA0);
	IIC_Wait_Ack();
	IIC_Write_Byte(DataAddr);
	IIC_Wait_Ack();
	IIC_Start();
	IIC_Write_Byte(DeviceAddr | 0xA1);
	IIC_Wait_Ack();
	Data=IIC_Read_Byte();
	IIC_NAck();
	IIC_Stop();
	return Data;
}


























